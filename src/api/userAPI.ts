import axios from 'axios';
import { UserRegister, AuthResponse, Rol, PerfilUsuario, Usuario } from '../interfaces/user';
import { cookieUtils } from '../utils/cookieUtils';

// Configuraci√≥n base de axios
export const API = axios.create({
    baseURL: import.meta.env.VITE_URL_BACKEND,
    withCredentials: true // üîß NUEVO: Para enviar cookies autom√°ticamente
});

    /**
     * Objetivo:
     * Hashear la contrase√±a del usuario utilizando SHA-256 antes de enviarla al backend.
     *
     * Par√°metros:
     * - password: string ‚Äî Contrase√±a en texto plano proporcionada por el usuario.
     *
     * Operaci√≥n:
     * Codifica la contrase√±a como UTF-8, aplica SHA-256 y convierte el resultado a hexadecimal.
     * Evita el env√≠o de contrase√±as en texto plano.
     * Reduce el riesgo de exposici√≥n accidental si se intercepta el tr√°fico.
     * Complementa el uso de cookies httpOnly en el backend para una autenticaci√≥n segura.
     */

// Funci√≥n para hacer hash de la contrase√±a
export async function hashPassword(password: string): Promise<string> {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// Servicios de autenticaci√≥n
    /**
     * Objetivo:
     * Realizar el inicio de sesi√≥n del usuario.
     *
     * Par√°metros:
     * - email: string ‚Äî Correo electr√≥nico del usuario.
     * - password: string ‚Äî Contrase√±a en texto plano.
     *
     * Operaci√≥n:
     * Hashea la contrase√±a, realiza una solicitud de tipo form-urlencoded al endpoint `/login`,
     * y luego consulta el perfil del usuario autenticado.
     * La contrase√±a se transmite hasheada usando SHA-256.
     * El backend responde con una cookie httpOnly.
     * No se expone el token JWT directamente; el token retornado es simb√≥lico.
     */

export const authAPI = {
    // Inicio de sesi√≥n
    login: async (email: string, password: string): Promise<{ token: string, userData: Usuario }> => {
        // Hash de la contrase√±a
        const hashedPassword = await hashPassword(password);
        
        // Configurar los datos del formulario
        const formData = new URLSearchParams();
        formData.append('username', email);
        formData.append('password', hashedPassword);
        
        // Realizar la petici√≥n
        const response = await API.post<AuthResponse>('/login', formData, {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
            }
        });
        
        // üîß OBTENER DATOS DEL USUARIO (la cookie ya est√° configurada por el backend)
        const userResponse = await API.get('/perfil');
        const userDetails = userResponse.data;
        
        const userData: Usuario = {
            id: userDetails.id,
            nombre: userDetails.nombre_usuario,
            email: userDetails.email,
            id_rol: userDetails.id_rol,
            rol: userDetails.rol
        };
        
        // üîß RETORNAR TOKEN DUMMY (la autenticaci√≥n real est√° en la cookie httpOnly)
        return { token: "authenticated", userData };
    },
    
    // Registro de usuario
    /**
     * Objetivo: Registrar un nuevo usuario en el sistema.
     *
     * Par√°metros:
     * - userData: objeto con los datos del nuevo usuario, incluyendo la contrase√±a.
     *
     * Operaci√≥n:
     * Hashea la contrase√±a antes de enviarla como JSON al endpoint `/register`.
     * El backend aplica validaciones adicionales y protege contra duplicaciones.
     * Se evita el almacenamiento o transmisi√≥n de contrase√±as sin cifrado.
     */

    register: async (userData: Omit<UserRegister, 'password'> & { password: string }): Promise<void> => {
        // Hash de la contrase√±a
        const hashedPassword = await hashPassword(userData.password);
        
        // Crear el objeto con la contrase√±a hasheada
        const userToRegister: UserRegister = {
            ...userData,
            password: hashedPassword
        };
        
        // Realizar la petici√≥n de registro
        await API.post('/register', userToRegister, {
            headers: {
                'Content-Type': 'application/json',
            }
        });
    },

    // Logout
    /**
     * Objetivo: Cerrar sesi√≥n del usuario en el backend.
     *
     * Par√°metros:Ninguno.
     *
     * Operaci√≥n:
     * Env√≠a una solicitud POST al endpoint `/logout`. Si falla, contin√∫a el logout local.
     * Invalida la cookie httpOnly en el servidor, finalizando la sesi√≥n segura.
     */

    logout: async (): Promise<void> => {
        try {
            await API.post('/logout');
        } catch (error) {
            // Continuar con logout local aunque falle el servidor
        }
    }
};

// Servicios de usuario
export const userAPI = {
    // Obtener el perfil del usuario actual
    /**
     * Objetivo: Obtener el perfil del usuario actualmente autenticado.
     *
     * Par√°metros: Ninguno.
     *
     * Operaci√≥n:
     * Consulta el endpoint `/perfil` para obtener los datos del usuario desde la cookie.
     * Solo accesible si el usuario tiene una cookie v√°lida y autorizada.
     * La cookie httpOnly evita manipulaci√≥n desde scripts del lado cliente.
     * Backend verifica sesi√≥n activa antes de responder.
     */

    getPerfilUsuario: async (): Promise<PerfilUsuario> => {
        try {
          const response = await API.get('/perfil');
          const data = response.data as { id: string; nombre: string; rol: string };
          return {
            id: data.id,
            nombre: data.nombre,
            id_rol: data.rol
          };
        } catch (error) {
          throw error; // Re-lanzar para manejo en componente
        }
      },
    
};

// Servicios de roles
export const rolAPI = {
    // Obtener todos los roles
    getRoles: async (): Promise<Rol[]> => {
        const response = await API.get('/roles/');
        return response.data as Rol[];
    }
};